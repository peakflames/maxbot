name: Build and Release

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_PATH: src/Cli/Cli.csproj
  PROJECT_NAME: max
  DOTNET_VERSION: '9.0.x'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            extension: .exe
          - os: ubuntu-latest
            rid: linux-x64
            extension: ''
          - os: macos-latest
            rid: osx-x64
            extension: ''

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        TAG=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$TAG" >> $GITHUB_ENV
        # Update version in project file if needed
        dotnet tool install -g dotnet-property
        dotnet property ${{ env.PROJECT_PATH }} Version:"$TAG"

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r ${{ matrix.rid }} -o ./publish/${{ matrix.rid }}

    # - name: Test
    #   run: dotnet test ${{ env.PROJECT_PATH }} --no-restore --verbosity normal

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.rid }}
        path: ./publish/${{ matrix.rid }}/${{ env.PROJECT_NAME }}${{ matrix.extension }}
        if-no-files-found: error

  create-release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Set version from tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Rename executables for release
        run: |
          mkdir -p release-assets
          cp "${{ env.PROJECT_NAME }}-win-x64/${{ env.PROJECT_NAME }}.exe" "release-assets/${{ env.PROJECT_NAME }}-win-x64.exe"
          cp "${{ env.PROJECT_NAME }}-linux-x64/${{ env.PROJECT_NAME }}" "release-assets/${{ env.PROJECT_NAME }}-linux-x64"
          cp "${{ env.PROJECT_NAME }}-osx-x64/${{ env.PROJECT_NAME }}" "release-assets/${{ env.PROJECT_NAME }}-osx-x64"
          chmod +x "release-assets/${{ env.PROJECT_NAME }}-linux-x64" "release-assets/${{ env.PROJECT_NAME }}-osx-x64"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
          files: |
            release-assets/${{ env.PROJECT_NAME }}-win-x64.exe
            release-assets/${{ env.PROJECT_NAME }}-linux-x64
            release-assets/${{ env.PROJECT_NAME }}-osx-x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
